# https://docs.docker.com/compose/environment-variables/#the-env-file
# https://github.com/NuGet/Home/issues/10491#issuecomment-778841003
version: "3.8"

services:
  gateway:
    image: ${REGISTRY:-ghcr.io}/${PROJECT_NAME:-mehdihadeli/ecommerce-microservices}/gateway-service:${TAG:-latest}
    container_name: gateway-${TAG:-latest}
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#restart
    restart: on-failure
    ports:
    - ${GATEWAY_HTTP_SVC_PORT:-3000}:80
    - ${GATEWAY_HTTPS_SVC_PORT:-3001}:443
    networks:
      - ecommerce
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/
    # https://docs.docker.com/compose/environment-variables/env-file/
    # https://learn.microsoft.com/en-us/aspnet/core/security/docker-compose-https?view=aspnetcore-7.0#windows-using-windows-containers
    environment:
    - ASPNETCORE_ENVIRONMENT=docker
    - ASPNETCORE_URLS=https://+:443;http://+:80
    - ASPNETCORE_Kestrel__Certificates__Default__Password=${DEV_CERT_PASSWORD:-your_password}
    - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/
    # https://docs.docker.com/compose/environment-variables/env-file/
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/#substitute-with---env-file
    # Substitute env files and replacing (without passing to container) inner docker-compose files with `--env-file` and pass the file as an argument in the CLI, If the --env-file is not used in the command line, the .env file is loaded by default(docker compose --env-file ./config/.env.dev up)
    # Pass multiple environment variables from an external file through to a service’s `containers` with the `env_file` attribute
    env_file:
      - ./.env
    volumes:
    - ~/.aspnet/https:/https:ro

  catalogs:
    image: ${REGISTRY:-ghcr.io}/${PROJECT_NAME:-mehdihadeli/ecommerce-microservices}/catalogs-service:${TAG:-latest}
    container_name: catalogs-${TAG:-latest}
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#restart
    restart: on-failure
    ports:
      - ${CATALOGS_HTTP_SVC_PORT:-4000}:80
      - ${CATALOGS_HTTPS_SVC_PORT:-4001}:443
    depends_on:
      - postgres
      - rabbitmq
      - mongo
    networks:
      - ecommerce
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/
    # https://docs.docker.com/compose/environment-variables/env-file/
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/#substitute-with---env-file
    # Substitute env files and replacing (without passing to container) inner docker-compose files with `--env-file` and pass the file as an argument in the CLI, If the --env-file is not used in the command line, the .env file is loaded by default(docker compose --env-file ./config/.env.dev up)
    # Pass multiple environment variables from an external file through to a service’s `containers` with the `env_file` attribute
    env_file:
      - ./.env
      - ./.env.catalogs
    # https://learn.microsoft.com/en-us/aspnet/core/security/docker-compose-https?view=aspnetcore-7.0#windows-using-windows-containers
    environment:
      - ASPNETCORE_ENVIRONMENT=docker
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${DEV_CERT_PASSWORD:-your_password}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
       - ~/.aspnet/https:/https:ro

  identity:
    image: ${REGISTRY:-ghcr.io}/${PROJECT_NAME:-mehdihadeli/ecommerce-microservices}/identity-service:${TAG:-latest}
    container_name: identity-${TAG:-latest}
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#restart
    restart: on-failure
    ports:
      - ${IDENTITY_HTTP_SVC_PORT:-7000}:80
      - ${IDENTITY_HTTPS_SVC_PORT:-7001}:443
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - ecommerce
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/
    # https://docs.docker.com/compose/environment-variables/env-file/
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/#substitute-with---env-file
    # Substitute env files and replacing (without passing to container) inner docker-compose files with `--env-file` and pass the file as an argument in the CLI, If the --env-file is not used in the command line, the .env file is loaded by default(docker compose --env-file ./config/.env.dev up)
    # Pass multiple environment variables from an external file through to a service’s `containers` with the `env_file` attribute
    env_file:
      - ./.env
      - ./.env.identity
    # https://learn.microsoft.com/en-us/aspnet/core/security/docker-compose-https?view=aspnetcore-7.0#windows-using-windows-containers
    environment:
      - ASPNETCORE_ENVIRONMENT=docker
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${DEV_CERT_PASSWORD:-your_password}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro

  customers:
    image: ${REGISTRY:-ghcr.io}/${PROJECT_NAME:-mehdihadeli/ecommerce-microservices}/customers-service:${TAG:-latest}
    container_name: customers-${TAG:-latest}
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#restart
    restart: on-failure
    ports:
      - ${CUSTOMERS_HTTP_SVC_PORT:-8000}:80
      - ${CUSTOMERS_HTTPS_SVC_PORT:-8001}:443
    depends_on:
      - postgres
      - rabbitmq
      - mongo
    networks:
      - ecommerce
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/
    # https://docs.docker.com/compose/environment-variables/env-file/
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/#substitute-with---env-file
    # Substitute env files and replacing (without passing to container) inner docker-compose files with `--env-file` and pass the file as an argument in the CLI, If the --env-file is not used in the command line, the .env file is loaded by default(docker compose --env-file ./config/.env.dev up)
    # Pass multiple environment variables from an external file through to a service’s `containers` with the `env_file` attribute
    env_file:
      - ./.env
      - ./.env.customers
    # https://learn.microsoft.com/en-us/aspnet/core/security/docker-compose-https?view=aspnetcore-7.0#windows-using-windows-containers
    environment:
      - ASPNETCORE_ENVIRONMENT=docker
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${DEV_CERT_PASSWORD:-your_password}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro

    #######################################################
    #  rabbitmq
    #######################################################
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: on-failure
    ports:
      - 5672:5672
      - 15672:15672
      # volumes:
      #   - rabbitmq:/var/lib/rabbitmq
    networks:
      - ecommerce

    #######################################################
    #  mongo
    #######################################################
  mongo:
    image: mongo
    container_name: mongo
    restart: on-failure
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    networks:
      - ecommerce

    #######################################################
    #  postgres
    #######################################################
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: on-failure
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - ecommerce

  #######################################################
  #  eventstore-db
  #######################################################
  eventstore:
    image: eventstore/eventstore:latest
    container_name: eventstore
    restart: on-failure
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=false
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      - EVENTSTORE_MEM_DB=true
    ports:
      - "1113:1113"
      - "2113:2113"
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
    networks:
      - ecommerce

  #   #######################################################
  #   #  Redis
  #   #######################################################

  # redis:
  #   image: redis
  #   container_name: redis
  #   restart: unless-stopped
  #   networks:
  #     - ecommerce
  #   ports:
  #     - 6379:6379
  #   volumes:
  #     - redis:/data

  #######################################################
  #  Portainer
  #######################################################
  # https://bobcares.com/blog/install-portainer-docker-compose/
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - 9000:9000
    networks:
      - ecommerce

    #######################################################
    #  elasticsearch
    #######################################################
  elasticsearch:
    container_name: elastic_search
    restart: on-failure
    image: docker.elastic.co/elasticsearch/elasticsearch:latest
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - ecommerce

    #######################################################
    #  kibana
    #######################################################
  kibana:
    image: docker.elastic.co/kibana/kibana:latest
    container_name: kibana
    restart: on-failure
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic_search:9200
    ports:
      - "5601:5601"
    networks:
      - ecommerce
    depends_on:
      - elasticsearch

  jaeger:
    container_name: jaeger
    restart: on-failure
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - ecommerce

    #######################################################
    #  zipkin
    #######################################################
  zipkin:
    image: openzipkin/zipkin:latest
    restart: on-failure
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - ecommerce

    #######################################################
    #  otel-collector
    #######################################################
  otel-collector:
    image: otel/opentelemetry-collector-contrib-dev:latest
    command: ["--config=/etc/otel-collector-config.yaml", ""]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger
      - zipkin
    networks:
      - ecommerce

    #######################################################
    # prometheus
    #######################################################
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: on-failure
    user: root
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - ecommerce

    #######################################################
    # node_exporter
    #######################################################
  node_exporter:
    container_name: node_exporter
    restart: on-failure
    image: prom/node-exporter
    ports:
      - "9101:9100"
    networks:
      - ecommerce

    #######################################################
    # grafana
    #######################################################
  grafana:
    container_name: grafana
    restart: on-failure
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - ecommerce

  #######################################################
  # seq
  #######################################################
  seq:
    image: datalust/seq:latest
    container_name: seq
    restart: on-failure
    ports:
      - 8081:80
      - 5341:5341
    environment:
      ACCEPT_EULA: Y
    networks:
      - ecommerce

# https://docs.docker.com/compose/networking/
# https://docs.docker.com/engine/reference/commandline/network_create/
# https://docs.docker.com/compose/compose-file/#networks-top-level-element
# https://stackoverflow.com/questions/38088279/communication-between-multiple-docker-compose-projects
# We could use also a predefined network and connect to that predefined network with specifying the 'name' of existing network and set 'external' attribute to true
# When we run docker-compose up, Docker Compose will check if the 'ecommerce' network already exists. If it does not exist, it will create the 'ecommerce' network. If it exists, it will use the existing 'ecommerce' network. problem is that if we do a docker-compose down this network will delete and other docker-compose that use same network will fail because network deleted so its better we use `external` keyword for using a predefined network
networks:
  ecommerce:
    name: ecommerce
    driver: bridge

volumes:
  eventstore-volume-data:
  eventstore-volume-logs:
  elastic-data:
